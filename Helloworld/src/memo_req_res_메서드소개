request, response 메서드 소개

* HttpServlet 사용시 이점 *

1) HttpServlet, doGet() <- 화면을 호출 , doPost() <- 로직을 처리
필요한 메서드들을 오버라이드(재정의)에서, get과 post를 구분지어서 작업가능

2) HttpServlet 상속을 받아 사용해서
톰캣(WAS,Web Application Server,중간에서 처리해서 미들웨이서버, 톰캣 컨테이너 + 정적인 화면을
처리하는 웹서버 기능도 포함) -> 내부에서 자동으로 객체 생성 및 관리해서 개발자가 신경 쓸 필요 없게끔
수고로움을 덜어줌.

3) HttpServlet 내부적으로 멀티스레드(예를들면 채팅 같은개념) 동시에 이용하고 실행 가능
-> 동시 처리 부분을 따로 고민할 필요가 없음.
예시) 통신프로그램등(라이브러리,api)보면 멀티 스레드가 고려해서 설계

모든 함수를 알 필요는 없지만
내부적으로 기본적인것
라이프 사이클, 톰캣에서 해당 서블릿 객체를
생성 - init() 메서드 최초에 한번 호출
사용 - doGet(), doPost(), 사용자가 요청 할 때마다 매버 호출이 됨
소멸 - destroy() 서버가 종료시 한번 호출되는 메서드

자주 사용하는 메서드
1. getParameter()
:초반에 웹브라우저에서 넘어온 데이터 파라미터를 가져오는 역할
예시) 현재, 낱개로 데이터를 전달

로그인을 한다고 치면 -> username ,password 각각 보내고 각각 받음
나중에는 DTO 모델클래스를 만들고 그 안에다가 username , password
model 객체를 이용해서 자동으로 멤버의 이름이 동일하면 자동으로 클래스 속성으로 초기화됨.

2. getParameterValues
: 동일한 이름으로 넘어온 여러 데이터를 받을 때 사용함.
예시) 체크박스 or 라디오그룹에서 같은 이름으로 설정한 태그들,
키 : fruits, 값1: 바나나 , 값2: 사과, 값3: 포도

3. setAttribute()
:JSP(화면)로 전달할 데이터를 추가할 때 사용함.
DB단에 어떤 데이터를 받아오면 그 데이터를 setAttribute해서 받아옴.

4. RequestDispatcher에서
    forward(): 현재까지의 모든 응답내용을 무시하고 작성한 내용만 전달(더 많이 사용함, 단순전달이기 때문)
    include(): 지금가지 만든 응답내용 + jsp(화면)가 만든 내용을 같이 전달

